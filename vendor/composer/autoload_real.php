<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit84155a85edbbbf9e1aa41cb6e7b234fe
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        spl_autoload_register(array('ComposerAutoloaderInit84155a85edbbbf9e1aa41cb6e7b234fe', 'loadClassLoader'), true, true);
<<<<<<< HEAD
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInit84155a85edbbbf9e1aa41cb6e7b234fe', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(\Composer\Autoload\ComposerStaticInit84155a85edbbbf9e1aa41cb6e7b234fe::getInitializer($loader));

        $loader->register(true);

        $includeFiles = \Composer\Autoload\ComposerStaticInit84155a85edbbbf9e1aa41cb6e7b234fe::$files;
=======
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(\dirname(__FILE__)));
        spl_autoload_unregister(array('ComposerAutoloaderInit84155a85edbbbf9e1aa41cb6e7b234fe', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require __DIR__ . '/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit84155a85edbbbf9e1aa41cb6e7b234fe::getInitializer($loader));
        } else {
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit84155a85edbbbf9e1aa41cb6e7b234fe::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
>>>>>>> 235655f5eb777581d7f5d94f265678c17a3084c0
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire84155a85edbbbf9e1aa41cb6e7b234fe($fileIdentifier, $file);
        }

        return $loader;
    }
}

<<<<<<< HEAD
/**
 * @param string $fileIdentifier
 * @param string $file
 * @return void
 */
function composerRequire84155a85edbbbf9e1aa41cb6e7b234fe($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

        require $file;
=======
function composerRequire84155a85edbbbf9e1aa41cb6e7b234fe($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
>>>>>>> 235655f5eb777581d7f5d94f265678c17a3084c0
    }
}
